New in Release 1.2.0
* new license Copyright Alan C. Evans

New in Release 1.1.2
* fix call to input_volume() in createLaplacianGrid.c
  to allow reading the -like file in any datatype in
  -from_surfaces mode (would crash if not in NC_BYTE)
* add check to avoid endless streamlines (when streamline
  spirals around a local max)

New in Release 1.1.1
* added the ability to save gradients as MINC volumes.

New in Release 1.1.0
* added the ability to, rather than computing the length of
  streamlines (i.e. cortical thickness), compute the average values of a
  specified volume along the streamlines.

New in Release 1.0.3
* fix createLaplacianGrid_main.c to make use of return value from
  create_mantle and return a value itself (used by Laplacian thickness).
* fix create_mantle to pass out_volume by reference.

New in Release 1.0.2
* get rid of ParseArgv and use the one from minc library
* fix return value from create_mantle to return a status code

New in Release 1.0.1
* epm-header and packaging for minc2 m4 files

New in Release 1.0
* Restore command line options for backward compatibility for 
  gradients calculation, but still force it to be in floats.
  This is to avoid the old clasp to crash with -gradients-double.
* SOR Gauss-Seidel solver for better convergence
* New error norm for convergence test
* Fixed the hopefully correctly implemented fourth order
  Runge-Kutta method (missing h)
* Forced floats for gradients calculation
* Removed clipping at 50 steps for integration (this was
  giving truncated streamlines)

New in Release 0.4
* many more options to deal with data-types.
* correct handling of data-types.
* used in the thesis seminar presentation version of the simulation.



2004-08-10	Jason Lerch	<jason@bic.mni.mcgill.ca>

	* Switched the fixed grid to be a mniVolume rather than a
	mniLabelVolume, since for some reason that was causing problems
	on linux.
	* Take absolute values during convergence checking. Appears to
	work better.
	
2002-05-06	Jason Lerch	<jason@bic.mni.mcgill.ca>

	* fourth order Runge-Kutta method (hopefully correctly) implemented.

2002-05-06	Jason Lerch	<jason@bic.mni.mcgill.ca>

	* using function pointers for the integration step. Can now handle
	a second order runge-kutta model. A fourth order runge-kutta is
	still in the works, as are real options in order to let the user
	control which approach to take.
	
2002-04-21	Jason Lerch	<jason@bic.mni.mcgill.ca>
	* improved the layered thickness implementation
2002-04-20	Jason Lerch	<jason@bic.mni.mcgill.ca>
	* started the ChangeLog (finally)
	* added the linear_thickness directory
	* started a layered linear thickness implementation
	
